/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import controlador.ProductoControlador;
import java.util.List;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import bd.Conexion; // este es tu paquete de conexi√≥n
import java.util.ArrayList;

/**
 *
 * @author user
 */
public class frmAlertas extends javax.swing.JFrame {

    /**
     * Creates new form frmAlertas
     */
    public frmAlertas() {
        initComponents();
        this.setLocationRelativeTo(null);
        setTitle("Reporte de Alertas");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblAlertas = new javax.swing.JTable();
        btnAlertas = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        btnDetalles = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblAlertas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblAlertas);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 510, 320));

        btnAlertas.setText("Mostrar");
        btnAlertas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlertasActionPerformed(evt);
            }
        });
        getContentPane().add(btnAlertas, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, -1, 40));

        btnVolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/volver-al-pasado.png"))); // NOI18N
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 360, 100, 40));

        btnDetalles.setText("Detalles Vencidos");
        btnDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetallesActionPerformed(evt);
            }
        });
        getContentPane().add(btnDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, -1, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlertasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlertasActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.setColumnIdentifiers(new String[]{"ID", "C√≥digo", "Nombre", "Cantidad", "Vencimiento"});

        ProductoControlador pc = new ProductoControlador();
        List<String[]> alertas = pc.obtenerProductosBajoStockOVencimiento();

        for (String[] fila : alertas) {
            modelo.addRow(fila);
        }

        tblAlertas.setModel(modelo);
    }//GEN-LAST:event_btnAlertasActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        frmPrincipal principal = new frmPrincipal();
        principal.setLocationRelativeTo(null);
        principal.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    private void btnDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetallesActionPerformed
        // TODO add your handling code here:
        DefaultTableModel modelo = (DefaultTableModel) tblAlertas.getModel();

        if (modelo.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay productos para mostrar.");
            return;
        }

        List<String[]> vencidos = new ArrayList<>();

        // Paso 1: Filtrar productos vencidos
        for (int i = 0; i < modelo.getRowCount(); i++) {
            String nombre = modelo.getValueAt(i, 2).toString();
            String codigo = modelo.getValueAt(i, 1).toString();
            String fechaVencimiento = modelo.getValueAt(i, 4).toString();
            if (calcularDiasAntesDeVencer(fechaVencimiento).equals("VENCIDO")) {
                vencidos.add(new String[]{nombre, codigo, fechaVencimiento});
            }
        }

        if (vencidos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay productos vencidos.");
            return;
        }

        boolean repetir = true;

        while (repetir) {
            // Paso 2: Mostrar opciones a elegir
            String[] opciones = vencidos.stream()
                    .map(p -> p[0] + " (" + p[1] + ")")
                    .toArray(String[]::new);

            String seleccion = (String) JOptionPane.showInputDialog(
                    this,
                    "Selecciona un producto vencido para ver detalles:",
                    "Productos vencidos",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opciones,
                    opciones[0]
            );

            if (seleccion == null) {
                break; // Cancel√≥
            }
            // Paso 3: Buscar detalles del seleccionado
            for (String[] prod : vencidos) {
                String nombre = prod[0];
                String codigo = prod[1];
                String fecha = prod[2];

                if (seleccion.contains(nombre) && seleccion.contains(codigo)) {
                    double precio = obtenerPrecioProductoPorNombre(nombre);
                    int stock = obtenerStockProductoPorNombre(nombre);
                    double valorizado = precio * stock;

                    StringBuilder detalle = new StringBuilder();
                    detalle.append("üü¢ Producto: ").append(nombre)
                            .append("\nüÜî C√≥digo: ").append(codigo)
                            .append("\nüì¶ Stock: ").append(stock)
                            .append("\nüí≤ Valorizado: S/ ").append(String.format("%.2f", valorizado))
                            .append("\n‚è≥ Estado: VENCIDO (desde ").append(fecha).append(")");

                    int r = JOptionPane.showOptionDialog(
                            this,
                            detalle.toString(),
                            "Detalle del producto",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.INFORMATION_MESSAGE,
                            null,
                            new String[]{"Ver otro", "Salir"},
                            "Ver otro"
                    );

                    repetir = (r == 0);
                    break;
                }
            }
        }
    }//GEN-LAST:event_btnDetallesActionPerformed

    private double obtenerPrecioProductoPorNombre(String nombreProducto) {
        double precio = 0;
        try (Connection con = Conexion.conectar()) {
            String sql = "SELECT precio FROM producto WHERE nombreProducto = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, nombreProducto);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                precio = rs.getDouble("precio");
            }
        } catch (Exception e) {
            System.out.println("Error al obtener precio: " + e.getMessage());
        }
        return precio;
    }

    private String calcularDiasAntesDeVencer(String fechaVencimientoStr) {
        try {
            LocalDate hoy = LocalDate.now();
            LocalDate fechaVencimiento = LocalDate.parse(fechaVencimientoStr);
            long dias = ChronoUnit.DAYS.between(hoy, fechaVencimiento);
            return (dias >= 0) ? dias + " d√≠as" : "VENCIDO";
        } catch (Exception e) {
            return "Fecha inv√°lida";
        }
    }

    private int obtenerStockProductoPorNombre(String nombreProducto) {
        int cantidad = 0;
        try (Connection con = Conexion.conectar()) {
            String sql = "SELECT cantidad FROM producto WHERE nombreProducto = ?";
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, nombreProducto);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                cantidad = rs.getInt("cantidad");
            }
        } catch (Exception e) {
            System.out.println("Error al obtener stock: " + e.getMessage());
        }
        return cantidad;
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlertas;
    private javax.swing.JButton btnDetalles;
    private javax.swing.JButton btnVolver;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAlertas;
    // End of variables declaration//GEN-END:variables
}
